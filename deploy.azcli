# Run commands below over Linux VM with Azure CLI and gcloud installed.

#Prerequisite - Install AZ and GCP CLI:
# Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest
curl -sL https://aka.ms/InstallAzureCLIDeb | bash
# GCP CLI: https://cloud.google.com/sdk/docs/install#deb

# Login/Subscription
az login
#If necessary select your target subscription:
az account set --subscription <Name or ID of subscription>
# GCP CLI
gcloud init

#Azure Variables
rg=LAB-ER-VPN-Coexistence #Define your resource group
location=centralus #Set Region
mypip=$(curl -4 ifconfig.io -s) #Captures your local Public IP and adds it to NSG to restrict access to SSH only for your Public IP.
sharedkey=$(openssl rand -base64 24) #VPN Gateways S2S shared key is automatically generated.

#Define parameters for Azure Hub and Spokes:
AzurehubName=Az-Hub #Azure Hub Name
AzurehubaddressSpacePrefix=10.0.10.0/24 #Azure Hub VNET address space
AzurehubNamesubnetName=subnet1 #Azure Hub Subnet name where VM will be provisioned
Azurehubsubnet1Prefix=10.0.10.0/27 #Azure Hub Subnet address prefix
AzurehubgatewaySubnetPrefix=10.0.10.32/27 #Azure Hub Gateway Subnet address prefix
AzurehubrssubnetPrefix=10.0.10.64/27 #Azure Hub Route Server subnet address prefix
AzureFirewallPrefix=10.0.10.128/26 #Azure Firewall Prefix
Azurespoke1Name=Az-Spk1 #Azure Spoke 1 name
Azurespoke1AddressSpacePrefix=10.0.11.0/24 # Azure Spoke 1 VNET address space
Azurespoke1Subnet1Prefix=10.0.11.0/27 # Azure Spoke 1 Subnet1 address prefix
Azurespoke2Name=Az-Spk2 #Azure Spoke 1 name
Azurespoke2AddressSpacePrefix=10.0.12.0/24 # Azure Spoke 1 VNET address space
Azurespoke2Subnet1Prefix=10.0.12.0/27 # Azure Spoke 1 VNET address space

#Parsing parameters above in Json format (do not change)
JsonAzure={\"hubName\":\"$AzurehubName\",\"addressSpacePrefix\":\"$AzurehubaddressSpacePrefix\",\"subnetName\":\"$AzurehubNamesubnetName\",\"subnet1Prefix\":\"$Azurehubsubnet1Prefix\",\"AzureFirewallPrefix\":\"$AzureFirewallPrefix\",\"gatewaySubnetPrefix\":\"$AzurehubgatewaySubnetPrefix\",\"rssubnetPrefix\":\"$AzurehubrssubnetPrefix\",\"spoke1Name\":\"$Azurespoke1Name\",\"spoke1AddressSpacePrefix\":\"$Azurespoke1AddressSpacePrefix\",\"spoke1Subnet1Prefix\":\"$Azurespoke1Subnet1Prefix\",\"spoke2Name\":\"$Azurespoke2Name\",\"spoke2AddressSpacePrefix\":\"$Azurespoke2AddressSpacePrefix\",\"spoke2Subnet1Prefix\":\"$Azurespoke2Subnet1Prefix\"}
JsonOnPrem={\"name\":\"$OnPremName\",\"addressSpacePrefix\":\"$OnPremVnetAddressSpace\",\"subnet1Prefix\":\"$OnPremSubnet1prefix\",\"gatewaySubnetPrefix\":\"$OnPremgatewaySubnetPrefix\",\"asn\":\"$OnPremgatewayASN\"}

#Deploy base lab environment = Hub + VPN Gateway + VM and two Spokes with one VM on each.
echo "***  Note you will be prompted by username and password ***"
echo "*** It will take around 30 minutes to finish the deployment ***"
az group create --name $rg --location $location
az deployment group create --name VPNERCoexist-$RANDOM --resource-group $rg \
--template-uri https://raw.githubusercontent.com/dmauser/azure-hub-spoke-base-lab/main/azuredeploy.json \
--parameters deployHubVPNGateway=true gatewaySku=VpnGw1 vpnGatewayGeneration=Generation1 Restrict_SSH_VM_AccessByPublicIP=$mypip sharedKey=$sharedkey deployHubERGateway=true Onprem=$JsonOnPrem Azure=$JsonAzure \
--output none

# Define GCP variables (Mandatory: Define your GCP project variable)
project=<add here> #Set your project Name (REQUIRED). Get your PROJECT_ID use command: gcloud projects list
region=us-central1 # (OPTIONAL) Set your region. Get Regions/Zones Use command: gcloud compute zones list
zone=$region-c # Set availability zone: a, b or c.
vpcrange=192.168.0.0/24
envname=vpnlab
vmname=vm1
mypip=$(curl -4 ifconfig.io -s) #Gets your Home Public IP or replace with that information. It will add it to the Firewall Rule.

#Set defaul project
gcloud config set project $project

#Create VPC
gcloud compute networks create $envname-vpc --subnet-mode=custom --mtu=1460 --bgp-routing-mode=regional
gcloud compute networks subnets create $envname-subnet --range=$vpcrange --network=$envname-vpc --region=$region

#Create Firewall Rule
gcloud compute firewall-rules create $envname-allow-traffic-from-azure --network $envname-vpc --allow tcp,udp,icmp --source-ranges 192.168.0.0/16,10.0.0.0/8,172.16.0.0/16,35.235.240.0/20,$mypip/32

#Create Ubuntu VM:
gcloud compute instances create $envname-vm1 --zone=$zone --machine-type=f1-micro --network-interface=subnet=$envname-subnet,network-tier=PREMIUM --image=ubuntu-1804-bionic-v20220118 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-balanced --boot-disk-device-name=$envname-vm1 

# *** Setup VPN tunnels ***
# GCP side
#GCP VPN
gcloud compute target-vpn-gateways create onpremvpn --region=$region --network=$envname-vpc 
gcloud compute addresses create onpremvpn-pip --region=$region
gcpvpnpip=$(gcloud compute addresses describe onpremvpn-pip --region=$region --format='value(address)')
gcloud compute forwarding-rules create onpremvpn-rule-esp --region=$region --address=$gcpvpnpip --ip-protocol=ESP --target-vpn-gateway=onpremvpn 
gcloud compute forwarding-rules create onpremvpn-rule-udp500 --region=$region --address=$gcpvpnpip --ip-protocol=UDP --ports=500 --target-vpn-gateway=onpremvpn 
gcloud compute forwarding-rules create onpremvpn-rule-udp4500 --region=$region --address=$gcpvpnpip --ip-protocol=UDP --ports=4500 --target-vpn-gateway=onpremvpn

#Azure Local Network Gateway
az network local-gateway create --gateway-ip-address $gcpvpnpip \
--name lng-onprem-gcp \
--resource-group $rg \
--local-address-prefixes 192.168.0.0/24

#GCP VPN Tunnel to Azure
azgwnamepip=$(az network public-ip show -g $rg -n Az-Hub-vpngw-pip1 --query ipAddress -o tsv)
gcloud compute vpn-tunnels create vpn-to-azure --region=$region --peer-address=$azgwnamepip --shared-secret=$sharedkey --ike-version=2 --local-traffic-selector=0.0.0.0/0 --remote-traffic-selector=0.0.0.0/0 --target-vpn-gateway=onpremvpn 
gcloud compute routes create vpn-to-azure-route-1 --network=$envname-vpc --priority=1000 --destination-range=10.0.0.0/8 --next-hop-vpn-tunnel=vpn-to-azure --next-hop-vpn-tunnel-region=$region

#Azure VPN tunnel to GCP
gwname=Az-Hub-vpngw
az network vpn-connection create --name Azure-to-OnpremGCP \
--resource-group $rg \
--vnet-gateway1 $gwname \
--location $(az group show -n $rg --query location -o tsv) \
--shared-key $sharedkey \
--local-gateway2 lng-onprem-gcp

#Check VPN Status on Azure side
# a) Check Connection Status (Note: you may get Unknown but wait a minute and issue the command again)
az network vpn-connection show -g $rg --n Azure-to-OnpremGCP --query connectionStatus -o tsv

# b) Check vpn connection IKE/SAs details
az network vpn-connection list-ike-sas -g $rg --n Azure-to-OnpremGCP

#GCP VPN Status on GCP Side
#More info: https://cloud.google.com/network-connectivity/docs/vpn/how-to/checking-vpn-status
gcloud compute vpn-tunnels describe vpn-to-azure --region=$region --format='flattened(status,detailedStatus)'

#Test VPN connectivity - SSH Azure VM and ping GCP VM.
#Get Azure Hub and Spoke VMs IPs 
echo $AzurehubName-lxvm && az network nic show --resource-group $rg -n $AzurehubName-lxvm-nic --query "ipConfigurations[].privateIPAddress" -o tsv &&
echo $Azurespoke1Name-lxvm && az network nic show --resource-group $rg -n $Azurespoke1Name-lxvm-nic --query "ipConfigurations[].privateIPAddress" -o tsv &&
echo $Azurespoke2Name-lxvm && az network nic show --resource-group $rg -n $Azurespoke2Name-lxvm-nic --query "ipConfigurations[].privateIPAddress" -o tsv

#Log on GCP VM and try to reach all tree VMs listed above:
gcloud compute ssh $envname-vm1 --zone=$zone

#Inside GCP VM ping Azure VMs
echo Az-Hub-Lxvm && ping 10.0.10.4 -O -c 5
echo Az-Spk1-lxvm && ping 10.0.11.4 -O -c 5
echo Az-Spk2-lxvm && ping 10.0.12.4 -O -c 5

### Bringing Azure ExpressRoute and Interconnect 

## GCP
# 1) Deploy Cloud Router:
gcloud compute routers create $envname-router --region=$region --network=$envname-vpc --asn=16550

# 2) Deploy DirectConnect:
gcloud compute interconnects attachments partner create $envname-vlan --region $region --edge-availability-domain availability-domain-1 --router $envname-router --admin-enabled
#Note save pairing key to provision GCP connection with your Provider.

# 3) Using Provider website create a VXC (Virtual Cross Connection) to GCP using pairing Key

## Azure
# 1) Create ExpressRoute Circuit
# In this example ExpressRoute is created in Dallas using Mepgaport as Provider. Make the necessary changes based on your needs
# Define variables
ername=ER-Dallas-Circuit # ExpressRoute Circuit Name
cxlocation=Dallas #Peering Location
provider=Megaport # Provider
az network express-route create --bandwidth 50 -n $ername --peering-location $cxlocation -g $rg --provider $provider -l $location --sku-family MeteredData --sku-tier Standard

# 2) Using Provider website create a VXC (Virtual Cross Connection) to Azure using provided Service Key

# 3) Connect ExpressRoute Circuit to the ExpressRoute Gateway in the VNET. Note: Only continue in case the ExpressRoute Circuit is fully provisioned.
# Create connection from ER VNET Gateway to ER Circuit
erid=$(az network express-route show -n $ername -g $rg --query id -o tsv) 
az network vpn-connection create --name ER-Connection-to-Onprem \
--resource-group $rg --vnet-gateway1 $AzurehubName-ergw \
--express-route-circuit2 $erid \
--routing-weight 0

# At this point when ExpressRoute is up. You should see connectivity switch between VPN and ER. 
# Make sure you have a ping between an Azure VM and GCP VM

# 4)  Disable ExpressRoute Private Peering over Portal under Private Peering and test the failover.

### Clean up VPN + ExpressRoute/Interconnect ###
# GCP
gcloud compute vpn-tunnels delete vpn-to-azure --region $region --quiet
gcloud compute routes delete vpn-to-azure-route-1 --quiet
gcloud compute forwarding-rules delete onpremvpn-rule-esp --region $region --quiet
gcloud compute forwarding-rules delete onpremvpn-rule-udp500 --region $region --quiet
gcloud compute forwarding-rules delete onpremvpn-rule-udp4500 --region $region --quiet
gcloud compute target-vpn-gateways delete onpremvpn --region $region --quiet
gcloud compute addresses delete onpremvpn-pip --region $region --quiet
gcloud compute interconnects attachments delete $envname-vlan --region $region --quiet 
gcloud compute routers delete $envname-router --region $region --quiet
gcloud compute instances delete $envname-vm1 --zone=$zone --quiet
gcloud compute firewall-rules delete $envname-allow-traffic-from-azure --quiet
gcloud compute networks subnets delete $envname-subnet --region=$region --quiet
gcloud compute networks delete $envname-vpc --quiet

# Azure
az group delete -g $rg --no-wait --yes